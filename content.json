{"pages":[{"title":"关于我","text":"&emsp;&emsp;还没有想好该怎么样介绍自己，那就先这样吧！ &emsp;&emsp;我养了两只猫，一只叫豆浆，一只叫油条。","link":"/about/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"分类","text":"","link":"/categories/index.html"}],"posts":[{"title":"重写equals方法为什么要重写hashcode?","text":"1.要讨论这个问题必须先明白==和equals的区别&emsp;&emsp;== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。 &emsp;&emsp;equals():它的作用也是判断两个对象是否相等。但它一般有两种使用情况： 情况1：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于通过”==”比较这两个对象。 情况2：类覆盖了equals()方法。一般，我们都覆盖equals()方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。 &emsp;&emsp;基本数据类型的包装类为引用类型，其中的equals()方法等价于”==”,以下为Integer的equals()方法: 1234567public boolean equals(Object obj) { if (obj instanceof Integer) { return this.value == (Integer)obj; } else { return false; }} &emsp;&emsp;String的equsle()方法被重写过，比较的是对象的值是否相等。 1234567891011121314public boolean equals(Object anObject) { if (this == anObject) { return true; } else { if (anObject instanceof String) { String aString = (String)anObject; if (this.coder() == aString.coder()) { return this.isLatin1() ? StringLatin1.equals(this.value, aString.value) : StringUTF16.equals(this.value, aString.value); } } return false; }} &emsp;&emsp;object的equals()方法比较的是对象的内存地址是否相等。 123public boolean equals(Object obj) { return this == obj;} 2.什么是hashcode()?&emsp;&emsp;hashcode()的作用是获取哈希码，返回一个int类型的整数。哈希码的作用是确定对象在哈希表中的索引位置。hashCode()定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode()函数。计算hash值是根据对象堆内存上地址转换成一个整数hash值。 引用JavaGuide教程里面的一段话:3.为什么要有hashCode&emsp;&emsp;我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode： 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashCode 值作比较，如果没有相符的hashCode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调用 equals()方法来检查 hashCode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。 4.hashCode与equals()的相关规定 如果两个对象相等，则hashCode一定相同 两个对象相等，两个对象分别调用equals()方法都返回true 两个对象有相同的hashCode值，它们不一定相同(两个对象hashCode的值相同，但是equals为false，就会被散列在散列表的不同位置) hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode(),则该class的两个对象无论如何都不会相等(即使这两个对象是相同的数据) 因此，equals()方法被覆盖过，则hashCode()方法也必须被覆盖 5.为什么重写equals()方法的时候必须要重写hashCode()?&emsp;&emsp;重写equals()的目的是有的时候我们只需要判断两个对象的某些属性相等就认为它们相等，如果此时不重写hashCode(),基于堆内存地址的散列值除非产生hash冲突，那不然两个对象必定不相等。 6.补充：什么是堆内存和栈内存？ 在Java中，栈(stack)是由编译器自动分配和释放的一块内存区域，主要用于存放一些基本类型（如int、float等）的变量、指令代码、常量及对象句柄（也就是对象的引用地址） 堆（heap）是一个程序运行动态分配的内存区域，在Java中，构建对象时所需要的内存从堆中分配。这些对象通过new指令“显式”建立，这种分配方式类似于数据结构中的链表。堆内存在使用完毕后，是由垃圾回收（Garbage Collection,GC）器“隐式”回收的。","link":"/2020/02/15/equals-hashcode/"},{"title":"Hello World","text":"&emsp;&emsp;国际惯例，先来一篇Hello，World! &emsp;&emsp;终于完成了一直以来的一个梦想，搭建一个属于自己的博客。记录一下学习到的新技术，偶尔记录一下生活上的趣事也是极好的。博客采用了hexo，主题采用了icarus，项目仓库在GitHub。由于GitHub Pages的访问速度太慢了，所以就将仓库关联到了Gitee，托管在了Gitee Pages。由于域名还在备案的流程当中，所以暂时用了Gitee二级域名，后面会换到自己的域名。https://www.zlgwzy.com &emsp;&emsp;接下来就是把以前做的笔记整理一下上传到博客，方便以后回顾，同时也加深了印象。 &emsp;&emsp;由于疫情的原因，一直宅在家学习准备面试。希望早点控制好疫情，就能够出去找工作面试了，希望能找到满意的工作。","link":"/2020/02/15/hello-world/"},{"title":"面试前的一些针对性复习计划","text":"1.准备面试的公司技术要求 熟练掌握IDEA开发工具，良好的编码习惯和风格 熟练SpringMVC、SpringBoot、mybatis等开发框架 良好的数据库知识mysql、redis、oracle、MQ等，强sql能力 熟练使用linux常用命令、环境配置 熟练使用Tomcat、Nginx等服务部署 熟悉maven环境 了解前端具备一定的开发经验，基本掌握：html、html5、css、css3，熟练掌握js代码编写，页面兼容性处理。 熟练运用关系型数据库：musql/oracle，具备一定的数据库表设计经验 2.自己不足的地方和学习计划 SpringMVC，熟悉一下xml配置和框架流程 mybatis熟悉一下相关的标签和注解 redis和MQ掌握一下高级用法，实际写点demo 熟悉Nginx服务部署 熟悉maven私服 熟悉js代码，jQuery 3.鼓励一下自己&emsp;&emsp;有多个前后端分离全栈开发经验，熟练使用vue和element-ui，前端应该不存在多大问题，了解一下性能优化。每天按着计划多复习和学习一点东西，找工作的时候肯定没问题。不用害怕面试，面试只不过是对自己技术做一个测试而已。踏踏实实的做好每一步，必能有所收获。","link":"/2020/02/15/interview/"}],"tags":[{"name":"equals","slug":"equals","link":"/tags/equals/"},{"name":"hashcode","slug":"hashcode","link":"/tags/hashcode/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"Hello World","slug":"Hello-World","link":"/tags/Hello-World/"},{"name":"日常计划","slug":"日常计划","link":"/tags/%E6%97%A5%E5%B8%B8%E8%AE%A1%E5%88%92/"},{"name":"面试","slug":"面试","link":"/tags/%E9%9D%A2%E8%AF%95/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"面试","slug":"面试","link":"/categories/%E9%9D%A2%E8%AF%95/"}]}